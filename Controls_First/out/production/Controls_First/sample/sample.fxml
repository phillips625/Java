<!--NB: After adding the jlf.... file to the folder, do not forget to add it as a dependency.
using the following steps:

1 Right click on the Control_First../Algorithms/...
2  Select 'Open Module Settings'
3 Select the 'Dependencies' option at the top
4 At the bottom, click the '+' button and select JAR.
5 Select the jlf.... file
6 Click ok

-->



            <!--IF A CLASS NAME ENDS WITH 'Pane', THEN IT IS A LAYOUT.-->
            <!--Sometimes this is not the case - e.g TitledPane (TitledPane is actually a control).-->

<?import javafx.geometry.Insets?>
<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.layout.HBox?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ToggleButton?>
<?import javafx.scene.control.RadioButton?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ToggleGroup?>
<?import javafx.scene.control.CheckBox?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.PasswordField?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.ChoiceBox?>
<?import javafx.scene.control.Slider?>
<?import javafx.scene.control.Spinner?>
<?import javafx.scene.control.ColorPicker?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.TitledPane?>
<?import javafx.scene.control.Accordion?>

<?import javafx.scene.image.ImageView?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.text.Font?>

<!--Importing the whole collections class-->
<?import javafx.collections.*?>
<!--The entries for each selectable item in the combobox is going to be a string. Hence the reason why we are importing
the String class.-->
<?import java.lang.String?>


<!--Button is a class. Button actually inherits from many classes - and of course, with inheritance, it inherits properties
from its parent classes. For example, it inherits the 'text' property from the Labeled class.-->

<!--We have added button via the jlfgr... file from http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-client-419417.html#7520-jlf-1.0-oth-JPR-->

<GridPane fx:controller="sample.Controller"
          xmlns:fx="http://javafx.com/fxml" alignment="center" hgap="10" vgap="10">
    <!--Adding a button at row 0 and column 0. Then we are adding a text on top of the button.-->
    <Button GridPane.rowIndex="0" GridPane.columnIndex="0" text="Click me">
        <!--Setting an image on the button-->
        <graphic>
            <ImageView>
                <Image url = "@/toolbarButtonGraphics/general/TipOfTheDay24.gif"/>
            </ImageView>
        </graphic>
    </Button>

    <!--WrapText is used to break texts up into multiple lines when it is too long to fit one line (aka wrapping text). -->
    <Label GridPane.rowIndex="0" GridPane.columnIndex="1" text="This is a label"
    textFill="blue" WrapText="true">
        <font>
            <Font name="Arial italic" size="12"/>
        </font>
        <!--@/ is saying that you should go to the root. toolbarButtonGraphics is saying that you should go into the jar
        file as this is in the classpath. -->
        <graphic>
            <ImageView>
                <Image url = "@/toolbarButtonGraphics/general/Information24.gif"/>
            </ImageView>
        </graphic>
    </Label>

    <!--fx:define - This is used to group radio buttons. fx:define needs to be added because the ToggleGroup class does not
    descend from node and therefore can't be added directly to the scene graph.-->
    <fx:define>
        <!--id will be assigned to the radio button.-->
        <ToggleGroup fx:id="colorToggleGroup"/>
    </fx:define>

    <VBox GridPane.rowIndex="0" GridPane.columnIndex="2">
        <!--In order to give the radio buttons the desired funtionality - aka allowing the user to select only one option - we have
        to put them in a Radio Group. RadioButton class descends from the ToggleButton class -  which allows toggle buttons to be
        added to a toggle group. $ te;ls java to look for a toggle group definition of colorToggleGroup.-->
        <RadioButton text="Red" toggleGroup="$colorToggleGroup"/>
        <!--The 'selected' property automatically selects this radio butoon by default-->
        <RadioButton text="Blue" toggleGroup="$colorToggleGroup" selected="true"/>
        <RadioButton text="Green" toggleGroup="$colorToggleGroup"/>

        <!--The Indeterminate property sets the checkbox to a dash initially.Then when you click it, it's off or on at that point. -->
        <!--We can't group CheckBox together under the same toggle group becuase CheckBox does not descend from the ToggleButton
        class. But what we can do is group the check boxes visually by placing our check boxes into a VBox.-->

        <!--<CheckBox text="Welcome to our newsletter" GridPane.rowIndex="0" GridPane.columnIndex="5"-->
                  <!--Indeterminate = "true"/>-->
    </VBox>

    <VBox GridPane.rowIndex="0" GridPane.columnIndex="3">

        <CheckBox text="Dog"/>
        <CheckBox text="Cat"/>
        <CheckBox text="Bird"/>

    </VBox>

    <!--RadioButton class descends from the ToggleButton class. So ToggleButton is a Java fx control in its own right-->
    <HBox GridPane.rowIndex="0" GridPane.columnIndex="4">
        <!-- ToggleButton - ToggleButton makes the button look dented when clicked and undented when clicked again.-->
        <!--We can now elmininate the rowIndex and columnIndex now that we have the HBox-->
        <!--<ToggleButton text= "Toggle me" GridPane.rowIndex="0" GridPane.columnIndex="6"/>-->

        <!--We can add the toggle buttons in a toggleGroup if we want only one to be selected at a time-->
        <ToggleButton text= "Toggle me"/>
        <ToggleButton text= "Hello me"/>
        <ToggleButton text= "Goodbye me"/>
    </HBox>

    <!--TextField class contains copy,cut,paste and select all methods. -->
    <TextField GridPane.rowIndex="1" GridPane.columnIndex="0"/>
    <!--This allows you to create a password field. TextField is the parent class of PasswordField.-->
    <PasswordField GridPane.rowIndex="1" GridPane.columnIndex="1"/>

    <!--ComboBox is basically a drop down menu.-->
    <!--This is a better option than the radio button option when you want to offer the client multiple options.-->
    <!--Columnspan expands the combobox aka drop down menu to 2 columns - so that the longer texts fit.-->
    <!--You can set the ComboBox so that it is editable by setting the editable property to true - not a common use for sure.-->

    <!--<ComboBox GridPane.rowIndex="1" GridPane.columnIndex="2" GridPane.columnSpan="3" editable="true">-->

    <ComboBox GridPane.rowIndex="1" GridPane.columnIndex="2" GridPane.columnSpan="2">

        <items>
            <!--We are populating the combobox with an array list of strings. -->
            <FXCollections fx:factory="observableArrayList">
                <String fx:value="This is Option 1"/>
                <String fx:value="This is Option 2"/>
                <String fx:value="This is Option 3"/>
                <String fx:value="This is Option 4"/>
                <String fx:value="This is Option 5"/>
            </FXCollections>
        </items>

        <!--Selecting a default value.-->
        <value>
            <String fx:value="This is Option 3"/>
        </value>
    </ComboBox>

    <!--ChoiceBox vs ComboBox - Choose choicebox when you have small number of items while combobox can handle a larger list
    of items. Preferred to use a combobox instead.-->
    <!--ChoiceBox has a tick next to the option that you pick-->
    <!--Because the above column span takes up 2 columns, we have to start from column index 4 for the choice box-->
    <ChoiceBox GridPane.rowIndex="1" GridPane.columnIndex="4">
        <items>
            <!--We are populating the combobox with an array list of strings. -->
            <FXCollections fx:factory="observableArrayList">
                <String fx:value="CB 1"/>
                <String fx:value="CB 2"/>
                <String fx:value="CB 3"/>
                <String fx:value="CB 4"/>
                <String fx:value="CB 5"/>
            </FXCollections>
        </items>
    </ChoiceBox>

    <!--showTickLabels allows the client to see the value of the slider. showTickMarks shows the tick marks of the slider.-->
    <!--minorTickCount - Increase the number of ticks between each number from the default (3) to 4.
    snapToTicks moves the round pointer to the closest point next to it - so it is not hanging between points.-->
    <Slider GridPane.rowIndex="2" GridPane.columnIndex="0" GridPane.columnSpan="4" min="0" max="100"
        showTickLabels="true" showTickMarks="true" minorTickCount="4" snapToTicks="true"/>

    <!--Alternative to the Slider. This is way more precise. -->
    <!--columnIndex starts at 4 because because the Slider spans from column 0 to 3.-->
    <!--editable is allows you to edit the spinner. initialValue sets the default value to 50.-->
    <Spinner GridPane.rowIndex="2" GridPane.columnIndex="4" GridPane.columnSpan="4" min="0" max="100" editable="true"
    initialValue="50"/>

    <!--Color palette. -->
    <ColorPicker GridPane.rowIndex="3" GridPane.columnIndex="0"/>

    <!--For picking dates.-->
    <DatePicker GridPane.rowIndex="3" GridPane.columnIndex="1"/>

    <!--We can put all the TitledPanes into one Accordion so that only one of the TitledPane can be opened at a time.-->
    <!--'$' tells expandedPane that the string after the $ is an id linked to a TitledPane.-->
    <Accordion GridPane.rowIndex="3" GridPane.columnIndex="2" GridPane.columnSpan="2"
               expandedPane="$tp3">
        <panes>
            <!--TitledPane - The title can hide and unhide its content.-->
            <TitledPane text="Titled Pane 1">
                <Label text="Label 1 is titled pane"/>
            </TitledPane>

            <TitledPane text="Titled Pane 2">
                <Label text="Label 2 is titled pane"/>
            </TitledPane>

            <!--In Accordion, the TitledPanes are all automatically closed.
            We are going to be making the third TitledPane automatically opened by first giving it an id ( as in
            fx:id="tp3" and then calling the id at the Accordion level by using the expandedPane property).-->
            <TitledPane fx:id="tp3" text="Titled Pane 3">
                <Label text="Label 3 is titled pane"/>
            </TitledPane>

        </panes>
    </Accordion>

</GridPane>

